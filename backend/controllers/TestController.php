<?php
/**
 * Created by PhpStorm.
 * User: wyf
 * Date: 2018/12/26
 * Time: 16:40
 */

namespace backend\controllers;

use Lcobucci\JWT\Builder;
use Lcobucci\JWT\Parser;
use Lcobucci\JWT\Signer\Keychain; // just to make our life simpler
use Lcobucci\JWT\Signer\Rsa\Sha256; // you can use Lcobucci\JWT\Signer\Ecdsa\Sha256 if you're using ECDSA keys

class TestController extends BaseController
{
    public function actionIndex()
    {
        $data = \Yii::$app->request->post();

    }

    public function actionTest()
    {
        $time = time();
        $token = (new Builder())->setIssuer('http://example.com') // Configures the issuer (iss claim)
        ->setAudience('http://example.org') // Configures the audience (aud claim)
        ->setId('4f1g23a12aa', true) // Configures the id (jti claim), replicating as a header item
        ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)
        ->setNotBefore(time() + 60) // Configures the time that the token can be used (nbf claim)
        ->setExpiration(time() + 3600) // Configures the expiration time of the token (exp claim)
        ->set('uid', 1) // Configures a new claim, called "uid"
        ->getToken(); // Retrieves the generated token
        /*$token->getHeaders(); // Retrieves the token headers
        $token->getClaims(); // Retrieves the token claims

        echo $token->getHeader('jti'); // will print "4f1g23a12aa"
        echo "<br>";
        echo $token->getClaim('iss'); // will print "http://example.com"
        echo "<br>";
        echo $token->getClaim('uid'); // will print "1"
        echo "<br>";*/
        echo $token; // The string representation of the object is a JWT string (pretty easy, right?)
        echo "<hr/>";
        $jwtArr = explode('.', $token);
        var_dump($jwtArr);
        list($header, $payload, $sign) = $jwtArr;
        var_dump(base64_decode($payload));
        die;

    }

    public function actionCheckToken()
    {
        $token = \Yii::$app->request->post('token');
        $token = (new Parser())->parse((string) $token); // Parses from a string
        $token->getHeaders(); // Retrieves the token header
        $token->getClaims(); // Retrieves the token claims

        echo $token->getHeader('jti'); // will print "4f1g23a12aa"
        echo $token->getClaim('iss'); // will print "http://example.com"
        echo $token->getClaim('uid'); // will print "1"
    }

    public function actionTestone()
    {
        $signer = new Sha256();

        $keychain = new Keychain();

        $token = (new Builder())->setIssuer('http://example.com') // Configures the issuer (iss claim)
        ->setAudience('http://example.org') // Configures the audience (aud claim)
        ->setId('4f1g23a12aa', true) // Configures the id (jti claim), replicating as a header item
        ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)
        ->setNotBefore(time() + 60) // Configures the time that the token can be used (nbf claim)
        ->setExpiration(time() + 3600) // Configures the expiration time of the token (nbf claim)
        ->set('uid', 1) // Configures a new claim, called "uid"
        ->sign($signer,  $keychain->getPrivateKey('file://{path to your private key}')) // creates a signature using your private key
        ->getToken(); // Retrieves the generated token


        var_dump($token->verify($signer, $keychain->getPublicKey('file://{path to your public key}'))); // true when the public key was generated by the private one =)
    }


}